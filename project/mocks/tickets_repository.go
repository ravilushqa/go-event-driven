// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "tickets/entity"

	mock "github.com/stretchr/testify/mock"
)

// TicketsRepository is an autogenerated mock type for the TicketsRepository type
type TicketsRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, ticketID
func (_m *TicketsRepository) Delete(ctx context.Context, ticketID string) error {
	ret := _m.Called(ctx, ticketID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, ticketID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store provides a mock function with given fields: ctx, ticket
func (_m *TicketsRepository) Store(ctx context.Context, ticket entity.Ticket) error {
	ret := _m.Called(ctx, ticket)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Ticket) error); ok {
		r0 = rf(ctx, ticket)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTicketsRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTicketsRepository creates a new instance of TicketsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTicketsRepository(t mockConstructorTestingTNewTicketsRepository) *TicketsRepository {
	mock := &TicketsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
